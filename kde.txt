#For convenience, we should install all available deps before installation now.
# pkg in kf6* qt6* build-essential extra-cmake-modules ninja mesa mesa-dev libglvnd-dev libwayland-protocols vulkan-headers plasma-wayland-protocols jq libcap boost boost-headers xorgproto libxss sdl2
#create a dir for plasma
mkdir Plasma-6.4.2 && cd Plasma-6.4.2
#now we'll download all files(not all of them needed)
url=https://download.kde.org/stable/plasma/6.4.2/
wget -r -nH -nd -A '*.xz' -np $url
#now let's build
I know what you're seeing isn't the best guide. but let's continue.

#kwayland
tar -xf kwayland-6.4.2.tar.xz
cd kwayland-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF
make -j$(nproc)
make install

#kdecoration
tar -xf kdecoration-6.4.2.tar.xz
cd kdecoration-6.4.2
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j$(nproc)
make install

#libkscreen
tar -xf libkscreen-6.4.2.tar.xz
cd libkscreen-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j$(nproc)
make install

[libksysguard (don't build it no need)
tar -xf libksysguard-6.4.2.tar.xz
#cd libksysguard-6.4.2
mkdir build && cd build
#[(this package depends on lm-sensors which will probably not work. it can be added for root users?for now we'll comment out sensors)
nano ../CMakeLists.txt > 1. find a line called "find_package(Sensors)" and comment out this line "#find_package(Sensors)"
                                             2.search a line "add_subdirectory( processcore )" add comment out this line "#add_subdirectory( processcore )"
now save it 
then open 
nano ../faces/CMakeLists.txt > search a line "KSysGuard::Sensors" and comment 
now save it
make -j4
make install]

#plasma-activities
tar -xf plasma-activities-6.4.2.tar.xz
cd plasma-activities-6.4.2
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j$(nproc)
make install

#plasma-activities-stats
tar -xf plasma-activities-stats-6.4.2.tar.xz
cd plasma-activities-stats-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j$(nproc)
make install

#kidletime
wget https://github.com/KDE/kidletime/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz
cd kidletime-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j$(nproc)
maje install

#plasma5support
tar -xf plasma5support-6.4.2.tar.xz
cd plasma5support-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j$(nproc)
make install

#layer-shell-qt
pkg in layer-shell-qt

#kcmutils
wget https://github.com/KDE/kcmutils/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.1
cd cd kcmutils-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j$(nproc)
make install

#ksvg
wget https://github.com/KDE/ksvg/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.2
cd ksvg-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j$(nproc)
make install

#aurorae(if you want)
tar -xf aurorae-6.4.2.tar.xz
cd aurorae-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j$(nproc)
make install

#frameworkintegration
wget https://github.com/KDE/frameworkintegration/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.3
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j$(nproc)
make install

#breeze
tar -xf breeze-6.4.2.tar.xz
cd breeze-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_QT6=ON -DBUILD_QT5=OFF
make -j$(nproc)
make install

#breeze-gtk
pkg install sassc
pkg in pycairo
tar -xf breeze-grub-6.4.2.tar.xz
cd breeze-gtk-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux -DBUILD_WITH_QT6=ON
make -j$(nproc)
make install

#kdoctools
pkg in docbook-xml
pkg in docbook-xsl
cpan install URI::Escape
wget https://github.com/KDE/kdoctools/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.4
cd kdoctools-6.16.0
mkdir build && cd build
mkdir -p ~/bin
ln -s /data/data/com.termux/files/home/Plasma-6.4.2/kdoctools-6.16.0/build/bin/meinproc6 ~/bin/KF6::meinproc6
export PATH="$HOME/bin:$PATH"
make -j4
make install

#qtpositioning
https://github.com/qt/qtpositioning/archive/refs/tags/v6.9.1.tar.gz
tar -xf v6.9.1.tar.gz.1
cd qtpositioning-6.9.1
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux -G Ninja
ninja -j4
ninja install

#qtlocation
wget https://github.com/qt/qtlocation/archive/refs/tags/v6.9.1.tar.gz
tar -xf v6.9.1.tar.gz
cd qtlocation-6.9.1
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux -G Ninja
ninja -j4
ninja install

#Qcoro
wget https://github.com/qcoro/qcoro/archive/refs/tags/v0.12.0.tar.gz
tar -xf v0.12.0.tar.gz
cd qcoro-0.12.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux -G Ninja
ninja -j4
ninja install

#libplasma
wget https://github.com/KDE/libplasma/archive/refs/tags/v6.4.2.tar.gz
tar -xf v6.4.2.tar.gz
cd libplasma-6.4.2
mkdir build && cd build 
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j4
make install

#kstatusnotifieritem
wget https://github.com/KDE/kstatusnotifieritem/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.6
cd kstatusnotifieritem-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON -DBUILD_PYTHON_BINDINGS=OFF
make -j4
make install

#kdnssd
wget https://github.com/KDE/kdnssd/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.7
cd kdnssd-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j4
make install

#syntax-highlighting
wget https://github.com/KDE/syntax-highlighting/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.8
cd syntax-highlighting-6.16.0
mkdir build && cd build
nano ../src/CMakeLists.txt 
#inside this search for "add_subdirectory(quick)" and comment
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j4
make install

#libproxy
git clone https://github.com/libproxy/libproxy
cd libproxy
pip install meson
pkg in gsettings-desktop-schemas
pkg in duktape libduktape gobject-introspection g-ir-scanner
meson setup builddir   --prefix=$PREFIX -Dvapi=false -Ddocs=false -Dintrospection=false
meson compile -C builddir
meson install -C builddir

#libkexiv2
tar -xf v25.07.80.tar.gz.1
cd libkexiv2-25.07.80
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#Phonon
wget https://github.com/KDE/phonon/archive/refs/tags/v4.12.0.tar.gz
tar -xf v4.12.0.tar.gz
cd phonon-4.12.0
mkdir build && cd build
pkg in pulseaudio-glib
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DPHONON_BUILD_QT5=OFF -DPHONON_BUILD_QT6=ON -DBUILD_WITH_QT6=ON
make -j4
make install

#kio-extras
pkg in openexr
wget https://github.com/KDE/kio-extras/archive/refs/tags/v25.07.80.tar.gz
tar -xf v25.07.80.tar.gz
cd kio-extras-25.07.80
mkdir build && cd build
nano ../thumbnail/CMakeLists.txt
#find this:
target_link_libraries(kio_thumbnail
    PUBLIC
        KF6::CoreAddons
        KF6::KIOCore
        KF6::KIOWidgets
        KF6::I18n
)
#replace with
target_link_libraries(kio_thumbnail
    PUBLIC
        KF6::CoreAddons
        KF6::KIOCore
        KF6::KIOWidgets
        KF6::I18n
        android-shmem
)    
#now save it
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#Kparts
wget https://github.com/KDE/kparts/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.9
cd kparts-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#krunner
wget https://github.com/KDE/krunner/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.10
cd krunner-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#Prison
pkg in libqrencode libzxing-cpp libdmtx
wget https://github.com/KDE/prison/archive/refs/tags/v6.16.0.tar.gz
cd prison-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j8
make install

#qtspeech
wget https://github.com/qt/qtspeech/archive/refs/tags/v6.9.1.tar.gz
tar -xf v6.9.1.tar.gz.2
cd qtspeech-6.9.1
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -G Ninja
ninja -j4
ninja install

#ktexteditor
pkg in editorconfig-core-c (optional)
wget https://github.com/KDE/ktexteditor/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.12
cd ktexteditor-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#kunitconversion
wget https://github.com/KDE/kunitconversion/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.13
cd kunitconversion-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON -DBUILD_PYTHON_BINDINGS=OFF
make -j4
make install

#SPIRV-Tools
git clone --recursive https://github.com/KhronosGroup/SPIRV-Tools.git
cd SPIRV-Tools
python3 utils/git-sync-deps
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DCMAKE_EXE_LINKER_FLAGS="-llog"
make -j4
make install

#kdeclarative
pkg in spirv-tools
wget https://github.com/KDE/kdeclarative/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.14
cd kdeclarative-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#baloo
pkg in liblmdb
wget https://github.com/KDE/baloo/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.15
cd baloo-6.16.0
mkdir build && cd build
-DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#baloo widgets
wget https://github.com/KDE/baloo-widgets/archive/refs/tags/v25.07.80.tar.gz
cd baloo-widgets-25.07.80
mkdir build && cd build 
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#kuserfeedback
wget https://github.com/KDE/kuserfeedback/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.16
cd kuserfeedback-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#Qtsensors
wget https://github.com/qt/qtsensors/archive/refs/tags/v6.9.1.tar.gz
tar -xf v6.9.1.tar.gz.3
cd qtsensors-6.9.1
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF  -G Ninja
ninja -j4
ninja install

#kglobalacceld
wget https://github.com/KDE/kglobalacceld/archive/refs/tags/v6.4.2.tar.gz
tar -xf tar -xf v6.4.2.tar.gz.1
cd kglobalacceld-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#kactivitymanagerd
same as above 

#kglobalaccel
git clone https://github.com/KDE/kglobalaccel.git
cd kglobalaccel
same as above 

#Kholidays
wget https://github.com/KDE/kholidays/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.17
cd kholidays-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install


#knighttime
git clone https://invent.kde.org/plasma/knighttime.git
cd knighttime
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j8
make install

#wayland protocol
git clone https://gitlab.freedesktop.org/wayland/wayland-protocols.git
cd wayland-protocols
mkdir build && cd build
meson setup --prefix=$PREFIX --buildtype=release ..
ninja -j4
ninja install

#kscreenlocker 
git clone https://invent.kde.org/plasma/kscreenlocker.git
cd kscreenlocker
git checkout v6.4.2
nano ../CMakeLists.txt
# find two lines "find_package(PAM REQUIRED)" and "add_subdirectory(greeter)" and place a # before like "#find_package(PAM REQUIRED)" and "#add_subdirectory(greeter)"
#now save it
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#libqaccessibilityclient
git clone https://invent.kde.org/libraries/libqaccessibilityclient.git
cd libqaccessibilityclient
mkdir build && cd build
cmake .. -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_SYSTEM_NAME=Linux   
make -j$(nproc) && make install

#kwin
pkg in xwayland 
pkg in libxcvt libdisplay-info libwayland-protocols

#Kwin_X11
git clone https://invent.kde.org/plasma/kwin-x11.git
cd kwin-x11
mkdir build && cd build
nano ../CMakeLists.txt
#find "find_package(UDev)" and comment out or replace with "#find_package(UDev)"
#save it
nano ../src/CMakeLists.txt
#find "UDev::UDev" and comment "#UDev::UDev"
also search this:
PUBLIC
        Qt::DBus
        Qt::Quick
        Qt::Widgets
        Wayland::Server
        KF6::ConfigCore
        KF6::CoreAddons
        KF6::WindowSystem
        epoxy::epoxy
replace with:
PUBLIC
        Qt::DBus
        Qt::Quick
        Qt::Widgets
        Wayland::Server
        KF6::ConfigCore
        KF6::CoreAddons
        KF6::WindowSystem
        epoxy::epoxy
        android-shmem
        
#save it
nano ../src/kcms/rules/CMakeLists.txt
#find this:
set(kcm_libs
    Qt::Quick

    KF6::KCMUtils
    KF6::I18n
    KF6::KCMUtilsQuick
    KF6::WindowSystem
    KF6::XmlGui
)
#replace with :
set(kcm_libs
    Qt::Quick
    Qt::DBus
    KF6::KCMUtils
    KF6::I18n
    KF6::KCMUtilsQuick
    KF6::WindowSystem
    KF6::XmlGui
    android-shmem
)
#save it
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON -DBUILD_WAYLAND_COMPOSITOR=OFF -DBUILD_KWIN_WAYLAND=OFF -DBUILD_KWIN_X11=ON -DKF6_HOST_TOOLING=$PREFIX/lib/cmake
make -j4
make install

#KDED
wget https://github.com/KDE/kded/archive/refs/tags/v6.16.0.tar.gz
tar -xf v6.16.0.tar.gz.5
cd kded-6.16.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j4
make install

#AppstreamQt
pkg in tur-repo
pkg in itstool
git clone https://github.com/ximion/appstream.git
cd appstream
meson setup builddir   --prefix=$PREFIX   -Dqt=true   -Dvapi=false   -Ddocs=false   -Dapidocs=false -Ddocs=false -Dgir=true  -Dsystemd=false -Dstemming=false
cd builddir
ninja -j8

#kquickcharts
git clone https://github.com/KDE/kquickcharts.git
cd kquickcharts
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make -j8
make install


#plasma-workspace(to everyone you may find typo or missing lines here if please notify me)
tar -xf plasma-workspace-6.4.2.tar.xz
cd plasma-workspace-6.4.2
mkdir build && cd build
nano ../CMakeLists.txt
#find this line "find_package(KWinDBusInterface CONFIG REQUIRED)" and replace it with "find_package(KWinX11DBusInterface CONFIG REQUIRED)"
#find this line "find_package(UDev REQUIRED)" and add # before like "#find_package(UDev REQUIRED)"
#find this line "find_package(PolkitQt6-1)" and add # before like "#find_package(PolkitQt6-1)"
comment "#find_package(KSysGuard ${PROJECT_DEP_VERSION} CO.....
nano ../kcms/CMakeLists.txt
find and comment #add_subdirectory(region_language)
find and comment #add_subdirectory(users)
nano ../kcms/region_language/localegenhelper/CMakeLists.txt
find and comment  "PolkitQt6-1::Core" 
nano ../devicenotifications/CMakeLists.txt
find and comment "UDev::UDev"
nano /data/data/com.termux/files/home/Plasma-6.4.2/plasma-workspace-6.4.2/kcms/region_language/CMakeLists.txt
find and comment exampleutility.cpp exampleutility.h
nano ../CMakeLists.txt
find and comment #add_subdirectory(devicenotifications)
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON -DBUILD_CAMERAINDICATOR=OFF
make -j4
make install

#plasma-workspace-wallpapers
tar -xf plasma-workspace-wallpapers-6.4.2.tar.xz
cd plasma-workspace-wallpapers-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF   -DBUILD_WITH_QT6=ON
make 
make install

#fontnoto/emoji
pkg install fontconfig-utils
mkdir -p ~/.local/share/fonts
cd ~/.local/share/fonts
wget https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Regular.ttf
wget https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Bold.ttf
wget https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf
fc-cache -fv

#plasma-integration
tar -xf plasma-integration-6.4.2.tar.xz
cd plasma-integration-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF  -DBUILD_QT5=OFF -DBUILD_QT6=ON
make -j4
make install

#milou
tar -xf milou-6.4.2.tar.xz
cd milou-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j4
make install

#ocean-sound-theme
tar -xf ocean-sound-theme-6.4.2.tar.xz
cd ocean-sound-theme-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make 
make install

#oxygen
tar -xf oxygen-6.4.2.tar.xz
cd oxygen-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF  -DBUILD_QT5=OFF -DBUILD_QT6=ON
make -j4
make install

#oxygen-sounds
tar -xf oxygen-sounds-6.4.2.tar.xz
cd oxygen-sounds-6.4.2
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make 
make install

#plasma-nano
tar -xf plasma-nano-6.4.2.tar.xz
cd plasma-nano-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF
make -j4
make install

#KpluseaudioQt
wget https://github.com/KDE/pulseaudio-qt/archive/refs/tags/v1.7.0.tar.gz
tar -xf v1.7.0.tar.gz
cd pulseaudio-qt-1.7.0
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF
make -j4
make install

#plasma-pa
tar -xf plasma-pa-6.4.2.tar.xz
cd plasma-pa-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF
make -j4
make install

#plasma-welcome
tar -xf plasma-welcome-6.4.2.tar.xz
cd plasma-welcome-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF
make -j4
make install

#purpose
git clone https://github.com/KDE/purpose.git
cd purpose
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF
make -j4
make install

#plasma-browser-integration
tar -xf plasma-browser-integration-6.4.2.tar.xz
cd plasma-browser-integration-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DCOPY_MESSAGING_HOST_FILE_HOME=ON
make -j4
make install

#plasma-sdk
tar -xf plasma-sdk-6.4.2.tar.xz
cd plasma-sdk-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF
make -j4
make install

#qqc2-breeze-style
tar -xf qqc2-breeze-style-6.4.2.tar.xz
cd qqc2-breeze-style
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF
make -j4
make install

#qqc2-desktop-style
git clone https://github.com/KDE/qqc2-desktop-style.git
cd qqc2-desktop-style
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF
make -j4
make install

#plasma-desktop
tar -xf plasma-desktop-6.4.2.tar.xz
cd plasma-desktop-6.4.2
#find_package(KSysGuard CONFIG REQUIRED)
find_package(KWinX11DBusInterface CONFIG REQUIRED)
pkg_check_modules(LIBWACOM libwacom REQUIRED
find_package(UDev)
nano ../kcms/tablet/CMakeLists.txt
PkgConfig::LIBWACOM
nano ../applets/taskmanager/CMakeLists.txt
PkgConfig::LIBWACOM

👆 having problems 
I will solve it later.

#systsystemsettings
tar -xf systemsettings-6.4.2.tar.xz
cd systemsettings-6.4.2
mkdir build && cd build
cmake ..   -DCMAKE_INSTALL_PREFIX=$PREFIX   -DCMAKE_BUILD_TYPE=Release   -DCMAKE_SYSTEM_NAME=Linux   -DBUILD_TESTING=OFF -DBUILD_WITH_QT6=ON
make -j4
make install 

